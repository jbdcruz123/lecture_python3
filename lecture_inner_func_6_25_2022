
#inner function 
#sample recursion
def factorial(number):
      # Validate input
      if not isinstance(number, int):
            raise TypeError("Sorry. 'number' must be an integer.")
      if number < 0:
            raise ValueError("Sorry. 'number' must be zero or positive.")
      # Calculate the factorial of number
      def inner_factorial(number):
            print("inside inner_factorial")
            if number <= 1:
                  return 1
            return number * inner_factorial(number - 1)
      return inner_factorial(number)

print(f"factorial (({ factorial(4)}))")

# inner_factorial(1)  #this will be NameError name "etc.." is not defined



#########################################
#powers.py
def generate_power(exponent):
      def power(base):
            print(f"inside power()")
            return base ** exponent
      return power

####################
#exec_powers.py, 
from powers import generate_power

raise_two = generate_power(2)

print(raise_two(2))
